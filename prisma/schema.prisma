generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String               @id
  email              String               @unique
  first_name         String?
  last_name          String?
  rawData            Json?
  settings           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  organizations      Organization[]
  Workflow           Workflow[]
  WorkflowRun        WorkflowRun[]
  OrganizationToUser OrganizationToUser[]
}

model Organization {
  id                 String               @id
  name               String
  image_url          String?
  logo_url           String?
  rawData            Json?
  credits            Int                  @default(0)
  createdByUser      String
  createdBy          User                 @relation(fields: [createdByUser], references: [id], onDelete: Cascade)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  workflows          Workflow[]
  OrganizationToUser OrganizationToUser[]
}

model OrganizationToUser {
  id             Int          @id @default(autoincrement())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Workflow {
  id        Int     @id @default(autoincrement())
  createdBy String
  ownerId   String
  name      String
  published Boolean @default(false)

  model         String
  modelSettings Json?
  template      String
  instruction   String?
  inputs        Json

  publicUrl String? @unique

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  WorkflowRun WorkflowRun[]

  organization Organization @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model WorkflowRun {
  id         Int      @id @default(autoincrement())
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId Int
  result     String
  rawRequest Json?
  rawResult  Json?
  createdBy  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model ImageOrder {
  id                Int      @id @default(autoincrement())
  type              String
  email             String?
  inputUrl          String
  outputUrl         String
  stripePaymentLink Json?
  paymentId         String?
  paymentStatus     String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
